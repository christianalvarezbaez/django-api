# Generated by Django 5.0.1 on 2024-01-24 18:37

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('id_client', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('location', models.TextField(blank=True, null=True)),
                ('age', models.BigIntegerField(blank=True, null=True)),
                ('gender', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'clients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FirstTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column1', models.CharField(blank=True, max_length=255, null=True)),
                ('columna2', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'first_table',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeographyColumns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_table_catalog', models.TextField(blank=True, null=True)),
                ('f_table_schema', models.TextField(blank=True, null=True)),
                ('f_table_name', models.TextField(blank=True, null=True)),
                ('f_geography_column', models.TextField(blank=True, null=True)),
                ('coord_dimension', models.BigIntegerField(blank=True, null=True)),
                ('srid', models.BigIntegerField(blank=True, null=True)),
                ('type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'geography_columns',
                'db_table_comment': "Shows all defined geography columns. Matches PostGIS' geography_columns functionality.",
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeometryColumns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_table_catalog', models.TextField(blank=True, null=True)),
                ('f_table_schema', models.TextField(blank=True, null=True)),
                ('f_table_name', models.TextField(blank=True, null=True)),
                ('f_geometry_column', models.TextField(blank=True, null=True)),
                ('coord_dimension', models.BigIntegerField(blank=True, null=True)),
                ('srid', models.BigIntegerField(blank=True, null=True)),
                ('type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'geometry_columns',
                'db_table_comment': "Shows all defined geometry columns. Matches PostGIS' geometry_columns functionality.",
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='KafkaTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alpha', models.CharField(blank=True, max_length=255, null=True)),
                ('beta', models.BigIntegerField(blank=True, null=True)),
                ('gamma', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'kafka_test',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialRefSys',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('srid', models.BigIntegerField(blank=True, null=True)),
                ('auth_name', models.CharField(blank=True, max_length=256, null=True)),
                ('auth_srid', models.BigIntegerField(blank=True, null=True)),
                ('srtext', models.CharField(blank=True, max_length=2048, null=True)),
                ('proj4text', models.CharField(blank=True, max_length=2048, null=True)),
            ],
            options={
                'db_table': 'spatial_ref_sys',
                'db_table_comment': "Shows all defined Spatial Reference Identifiers (SRIDs). Matches PostGIS' spatial_ref_sys table.",
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestingTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unnamed_0', models.BigIntegerField(blank=True, db_column='Unnamed: 0', null=True)),
                ('preguntas', models.TextField(blank=True, db_column='Preguntas', null=True)),
                ('correlacion', models.FloatField(blank=True, db_column='Correlacion', null=True)),
            ],
            options={
                'db_table': 'testing_table',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_client', models.CharField(blank=True, max_length=255, null=True)),
                ('time_stamp', models.DateTimeField(blank=True, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'transactions',
                'managed': False,
            },
        ),
    ]
